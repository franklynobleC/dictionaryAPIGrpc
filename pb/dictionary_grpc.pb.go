// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: dictionary.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnglishDictionaryClient is the client API for EnglishDictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnglishDictionaryClient interface {
	SearchWords(ctx context.Context, in *GetWords, opts ...grpc.CallOption) (*ReturnWords, error)
}

type englishDictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewEnglishDictionaryClient(cc grpc.ClientConnInterface) EnglishDictionaryClient {
	return &englishDictionaryClient{cc}
}

func (c *englishDictionaryClient) SearchWords(ctx context.Context, in *GetWords, opts ...grpc.CallOption) (*ReturnWords, error) {
	out := new(ReturnWords)
	err := c.cc.Invoke(ctx, "/englishDictionary/searchWords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnglishDictionaryServer is the server API for EnglishDictionary service.
// All implementations must embed UnimplementedEnglishDictionaryServer
// for forward compatibility
type EnglishDictionaryServer interface {
	SearchWords(context.Context, *GetWords) (*ReturnWords, error)
	mustEmbedUnimplementedEnglishDictionaryServer()
}

// UnimplementedEnglishDictionaryServer must be embedded to have forward compatible implementations.
type UnimplementedEnglishDictionaryServer struct {
}

func (UnimplementedEnglishDictionaryServer) SearchWords(context.Context, *GetWords) (*ReturnWords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWords not implemented")
}
func (UnimplementedEnglishDictionaryServer) mustEmbedUnimplementedEnglishDictionaryServer() {}

// UnsafeEnglishDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnglishDictionaryServer will
// result in compilation errors.
type UnsafeEnglishDictionaryServer interface {
	mustEmbedUnimplementedEnglishDictionaryServer()
}

func RegisterEnglishDictionaryServer(s grpc.ServiceRegistrar, srv EnglishDictionaryServer) {
	s.RegisterService(&EnglishDictionary_ServiceDesc, srv)
}

func _EnglishDictionary_SearchWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnglishDictionaryServer).SearchWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/englishDictionary/searchWords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnglishDictionaryServer).SearchWords(ctx, req.(*GetWords))
	}
	return interceptor(ctx, in, info, handler)
}

// EnglishDictionary_ServiceDesc is the grpc.ServiceDesc for EnglishDictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnglishDictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "englishDictionary",
	HandlerType: (*EnglishDictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "searchWords",
			Handler:    _EnglishDictionary_SearchWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dictionary.proto",
}
